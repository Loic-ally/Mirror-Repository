name: Chocolatine Workflow

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "git@github.com:EpitechPGEPromo2029/B-DOP-200-MLH-2-1-chocolatine-loic.philippe.git"
  EXECUTABLES: "mysh"
  BANNED_FUNCTIONS: "strcpy,strcat,gets,printf,sprintf"

jobs:
  check_coding_style:
    if: ${{ github.repository != 'EpitechPGEPromo2029/B-DOP-200-MLH-2-1-chocolatine-loic.philippe' }}
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)
      - name: Display errors
        run: |
          REPORT_FILE="coding-style-reports.log"
          cat "$REPORT_FILE"
          while IFS=: read -r FILE LINE TYPE CODE; do
            if [ "$TYPE" = " MINOR" ] || [ "$TYPE" = " MAJOR" ]; then
              RELATIVE_FILE=$(realpath --relative-to="$(pwd)" "$FILE")
              echo "::error file=$RELATIVE_FILE,line=$LINE::$TYPE error ($CODE) found."
            fi
          done < "$REPORT_FILE"
          if grep -q ": MAJOR:" "$REPORT_FILE" || grep -q ": MINOR:" "$REPORT_FILE"; then
            exit 1
          fi
          echo "No coding style errors found."
        shell: bash

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: check_coding_style
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Compile program
        run: make
        timeout-minutes: 2
      - name: Clean build
        run: make clean
      - name: Verify executables
        run: |
          failed=0
          IFS=',' read -r -a execs <<< "$EXECUTABLES"
          for exe in "${execs[@]}"; do
            if [ ! -x "$exe" ]; then
              echo "::error file=$exe,title=Missing or non-executable file::$exe is missing or not executable"
              failed=1
            fi
          done
          exit $failed
        shell: bash

  run_tests:
    runs-on: ubuntu-latest
    needs: check_program_compilation
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  check_banned_functions:
    runs-on: ubuntu-latest
    needs: check_coding_style
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Scan for banned functions
        run: |
          IFS=',' read -r -a banned <<< "$BANNED_FUNCTIONS"
          for func in "${banned[@]}"; do
            if grep -rnw . -e "$func" --include="*.c" --include="*.h"; then
              echo "::error title=Banned function detected::$func found in source code"
              exit 1
            fi
          done
        shell: bash

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
